#include <Arduino.h>
#if defined(ESP32)
  #include <WiFi.h>
#elif defined(ESP8266)
  #include <ESP8266WiFi.h>
#endif
#include <Firebase_ESP_Client.h>

//Provide the token generation process info.
#include "addons/TokenHelper.h"
//Provide the RTDB payload printing info and other helper functions.
#include "addons/RTDBHelper.h"

// Insert your network credentials
#define WIFI_SSID "ReDRaN"
#define WIFI_PASSWORD "2444666668888888"

// Insert Firebase project API Key
#define API_KEY "AIzaSyA2NNXFYCaxzkvLqqnU2WPpf6t1-0_SWBo"

// Insert RTDB URLefine the RTDB URL */
#define DATABASE_URL "https://lpgmonitor-cc6d1-default-rtdb.firebaseio.com/" 

//Define Firebase Data object
FirebaseData fbdo;

FirebaseAuth auth;
FirebaseConfig config;

unsigned long sendDataPrevMillis = 0;
bool signupOK = false;
float lpglevel;
float controlvalue;
const int lpgpin =2;
const int nitrogenpin = 4;
const int exhaustpin = 5;
const int blowerpin = 18;
const int powershut =19;
bool powerstate = false;
bool nitrogenstate = false;
bool exhauststate = false;
bool blowerstate = false;
bool lpgstate = false;

void setup(){
  pinMode(lpgpin,OUTPUT);
  pinMode(nitrogenpin,OUTPUT);
  pinMode(exhaustpin,OUTPUT);
  pinMode(blowerpin,OUTPUT);
  pinMode(powershut,OUTPUT);
  Serial.begin(9600);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED){
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  /* Assign the api key (required) */
  config.api_key = API_KEY;

  /* Assign the RTDB URL (required) */
  config.database_url = DATABASE_URL;

  /* Sign up */
  if (Firebase.signUp(&config, &auth, "", "")){
    Serial.println("ok");
    signupOK = true;
  }
  else{
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }

  /* Assign the callback function for the long running token generation task */
  config.token_status_callback = tokenStatusCallback; //see addons/TokenHelper.h
  
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
}       
void loop(){
  if (Firebase.ready() && signupOK && (millis() - sendDataPrevMillis > 1500 || sendDataPrevMillis == 0)){
    sendDataPrevMillis = millis();
    // Write an Int number on the database path test/int
    if (Firebase.RTDB.getInt(&fbdo, "/test/concen")) {
      if (fbdo.dataType() == "int") {
        controlvalue = fbdo.intData();
        Serial.print("controlvalue =");
        Serial.println(controlvalue);
      }
    }
    else {
      Serial.println(fbdo.errorReason());
    }
    if (Firebase.RTDB.getInt(&fbdo, "/hello/temp")) {
      if (fbdo.dataType() == "int") {
        lpglevel = fbdo.intData();
        Serial.print("lpglevel =");
        Serial.println(lpglevel);
      }
    }
    else {
      Serial.println(fbdo.errorReason());
    }
    if (Firebase.RTDB.getBool(&fbdo, "/power/state")) {
      if (fbdo.dataType() == "boolean") {
        powerstate = fbdo.boolData();
        Serial.print("powerstate =");
        Serial.println(powerstate);
      }
    }
    else {
      Serial.println(fbdo.errorReason());
    }
    if (Firebase.RTDB.getBool(&fbdo, "/blower/state")) {
      if (fbdo.dataType() == "boolean") {
        blowerstate = fbdo.intData();
        Serial.print("blowerstate =");
        Serial.println(blowerstate);
      }
    }
    else {
      Serial.println(fbdo.errorReason());
    }
    if (Firebase.RTDB.getBool(&fbdo, "/lpg/state")) {
      if (fbdo.dataType() == "boolean") {
        lpgstate = fbdo.intData();
        Serial.print("lpgstate =");
        Serial.println(lpgstate);
      }
    }
    else {
      Serial.println(fbdo.errorReason());
    }
    if (Firebase.RTDB.getBool(&fbdo, "/exhaust/state")) {
      if (fbdo.dataType() == "boolean") {
        exhauststate = fbdo.intData();
        Serial.print("exhauststate =");
        Serial.println(exhauststate);
      }
    }
    else {
      Serial.println(fbdo.errorReason());
    }
    if (Firebase.RTDB.getBool(&fbdo, "/nitrogen/state")) {
      if (fbdo.dataType() == "boolean") {
        nitrogenstate = fbdo.intData();
        Serial.print("nitrogenstate =");
        Serial.println(nitrogenstate);
      }
    }
    else {
      Serial.println(fbdo.errorReason());
    }
  }
  if (lpglevel >= 400 || controlvalue == 400){
    digitalWrite(lpgpin,LOW);
    digitalWrite(nitrogenpin,LOW);
    digitalWrite(exhaustpin,LOW);
    digitalWrite(blowerpin,HIGH);
    digitalWrite(powershut,LOW);
    delay(500);
  }
  else if(lpglevel >= 300 || controlvalue == 300){
    digitalWrite(lpgpin,LOW);
    digitalWrite(nitrogenpin,HIGH);
    digitalWrite(exhaustpin,LOW);
    digitalWrite(blowerpin,LOW);
    digitalWrite(powershut,HIGH);
    delay(500);
  }
  else if (lpglevel >= 200 || controlvalue == 200){
    digitalWrite(lpgpin,LOW);
    digitalWrite(nitrogenpin,HIGH);
    digitalWrite(exhaustpin,LOW);
    digitalWrite(blowerpin,HIGH);
    digitalWrite(powershut,HIGH);
    delay(500);
  }
  else{
    digitalWrite(lpgpin,HIGH);
    digitalWrite(nitrogenpin,HIGH);
    digitalWrite(exhaustpin,HIGH);
    digitalWrite(blowerpin,HIGH);
    digitalWrite(powershut,HIGH);
    delay(500);
  }
  if (powerstate == 1){
    digitalWrite(powershut,LOW);
  }
  else{
    digitalWrite(powershut,HIGH);
  }
  if (nitrogenstate == 1){
    digitalWrite(nitrogenpin,LOW);
  }
  else{
    digitalWrite(nitrogenpin,HIGH);
  }
  if(blowerstate == 1){
    digitalWrite(blowerpin,LOW);
  }
  else{
    digitalWrite(blowerpin,HIGH);
  }
  if(lpgstate == 1){
    digitalWrite(lpgpin,LOW);
  }
  else{
    digitalWrite(lpgpin,HIGH);
  }
  if(exhauststate == 1){
    digitalWrite(exhaustpin,LOW);
  }
  else{
    digitalWrite(exhaustpin,HIGH);
  }
}
